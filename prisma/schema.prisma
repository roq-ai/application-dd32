generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model agent {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String   @db.VarChar(255)
  rank         String   @db.VarChar(255)
  date_created DateTime @default(now()) @db.Timestamp(6)
  last_updated DateTime @default(now()) @db.Timestamp(6)
  user_id      String   @db.Uuid
  status       String   @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invitation {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date_created    DateTime     @default(now()) @db.Timestamp(6)
  last_updated    DateTime     @default(now()) @db.Timestamp(6)
  organization_id String       @db.Uuid
  officer_id      String       @db.Uuid
  status          String       @db.VarChar(255)
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  officer         officer      @relation(fields: [officer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model officer {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String       @db.VarChar(255)
  rank         String       @db.VarChar(255)
  date_created DateTime     @default(now()) @db.Timestamp(6)
  last_updated DateTime     @default(now()) @db.Timestamp(6)
  user_id      String       @db.Uuid
  status       String       @db.VarChar(255)
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  updated_at   DateTime     @default(now()) @db.Timestamp(6)
  invitation   invitation[]
  user         user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model operation {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(255)
  description     String?      @db.VarChar(255)
  date_created    DateTime     @default(now()) @db.Timestamp(6)
  last_updated    DateTime     @default(now()) @db.Timestamp(6)
  organization_id String       @db.Uuid
  status          String       @db.VarChar(255)
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?      @db.VarChar(255)
  date_created DateTime?    @default(now()) @db.Timestamp(6)
  last_updated DateTime?    @default(now()) @db.Timestamp(6)
  status       String?      @db.VarChar(255)
  name         String       @db.VarChar(255)
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  updated_at   DateTime     @default(now()) @db.Timestamp(6)
  user_id      String       @db.Uuid
  tenant_id    String       @db.VarChar(255)
  invitation   invitation[]
  operation    operation[]
  user         user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  agent        agent[]
  officer      officer[]
  organization organization[]
}
